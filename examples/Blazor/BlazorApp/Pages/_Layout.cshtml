@using Microsoft.AspNetCore.Components.Web
@namespace BlazorApp.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="BlazorApp.styles.css" rel="stylesheet" />
 
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />

    <script type="text/javascript">
        function scrollToEnd(textarea) {
            textarea.scrollTop = textarea.scrollHeight;
        }
      
    </script>
</head>
<body>
    @RenderBody()

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script src="https://cdn.rawgit.com/mattdiamond/Recorderjs/08e7abd9/dist/recorder.js"></script>
    <script>
        window.recordedData = [];
        window.MyJSMethods = {

            startRecording: function () {
                navigator.getUserMedia({ audio: true }, onSuccess, onError);
            },

            stopRecording: function (element) {
                stop.click();
            },

            getAudiosrc: function (element) {
            //   let audio = document.querySelector('audio');


                return window.recordedData;

            },
        }

        let onError = function (err) {
            console.log('The following error occurred: ' + err);
        };

        let stop = document.querySelector('.stop');

        let onSuccess = function (stream) {
            let recorder;
            let context;
            let audio = document.querySelector('audio');
            stop.disabled = false;

            let mainSection = document.querySelector('.main-controls');
            const canvas = document.querySelector('.visualizer');
            canvas.width = mainSection.offsetWidth;

            const canvasCtx = canvas.getContext("2d");

            context = new AudioContext();
            let mediaStreamSource = context.createMediaStreamSource(stream);
            recorder = new Recorder(mediaStreamSource);
            recorder.record();

            //visualize(stream, canvas, canvasCtx);


            stop.onclick = function () {
                recorder.stop();

                recorder.exportWAV(function (s) {
                    debugger;
                    (new Response(s).arrayBuffer()).then(content=>{
                        const contentNums = new Uint8Array(content);
                        const contentCodes = new TextDecoder('windows-1252').decode(contentNums);
                        window.recordedData = contentCodes;
                    });
                   
            


                    wav = window.URL.createObjectURL(s);
                    audio.src = window.URL.createObjectURL(s);
                    let filename = new Date().toISOString().replaceAll(':', "");
                    let fd = new FormData();
                    fd.append("file", s, filename);
                    let xhr = new XMLHttpRequest();
                    xhr.addEventListener("load", transferComplete);
                    xhr.addEventListener("error", transferFailed)
                    xhr.addEventListener("abort", transferFailed)
                    xhr.open("POST", "api/SaveAudio/Save/", true);
                    xhr.send(fd);

                });

                stop.disabled = true;


                function transferComplete(evt) {
                    console.log("The transfer is complete.");
                    //GLOBAL.DotNetReference.invokeMethodAsync('Recognize', filename);

                }

                function transferFailed(evt) {
                    console.log("An error occurred while transferring the file.");

                    console.log(evt.responseText);
                    console.log(evt.status);
                }

            }
        }

        recorder.exportWAV(function (s) {
            wav = window.URL.createObjectURL(s);
            audio.src = window.URL.createObjectURL(s);
            let filename = new Date().toISOString().replaceAll(':', "");
            let fd = new FormData();
            fd.append("file", s, filename);
            let xhr = new XMLHttpRequest();
            xhr.addEventListener("load", transferComplete);
            xhr.addEventListener("error", transferFailed)
            xhr.addEventListener("abort", transferFailed)
            xhr.open("POST", "api/SaveAudio/Save/", true);
            alert("Audio file created do somthing with it.")
            //xhr.send(fd);
        });


      

    </script>


</body>
</html>
